apply plugin: 'com.android.application'

def gitSha = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()
def buildTime = new Date().format("yyyy-MM-dd'T'HH:mm:ss'Z'", TimeZone.getTimeZone("UTC"))

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    defaultConfig {
        applicationId "nick.arora.todo2015"
        minSdkVersion 16
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"

        buildConfigField "String", "GIT_SHA", "\"${gitSha}\""
        buildConfigField "String", "BUILD_TIME", "\"${buildTime}\""

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release
    }

    buildTypes {
        debug {
            applicationIdSuffix '.debug'
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    packagingOptions {
        exclude 'LICENSE.txt'
    }

}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    /* Support dependencies */
    /* -------------------- */

    // Backport API and feature-set for Android 5.0
    compile 'com.android.support:appcompat-v7:23.1.1'

    /* 3rd party libs */
    /* -------------- */

    // Field and method binding for Android views
    compile 'com.jakewharton:butterknife:7.0.1'

    // Improved Android logging
    compile 'com.jakewharton.timber:timber:4.1.0'

    // Reactive components in Android
    compile 'io.reactivex:rxandroid:1.0.1'

    // Because RxAndroid releases are infrequent, also depend on RxJava
    compile 'io.reactivex:rxjava:1.0.16'

    // Dependency Injection
    compile 'com.google.dagger:dagger:2.0.2'

    // A type-safe Http Client
    compile 'com.squareup.retrofit:retrofit:2.0.0-beta2'

    // HTTP client
    compile 'com.squareup.okhttp:okhttp:2.5.0'

    // Image downloading and caching library
    compile 'com.squareup.picasso:picasso:2.5.2'

    // Reactive stream semantics to DB queries
    compile 'com.squareup.sqlbrite:sqlbrite:0.4.1'

    // Custom fonts
    compile 'uk.co.chrisjenx:calligraphy:2.1.0'

    // Svg support
    compile 'com.github.japgolly.android:svg-android:2.0.6'

    /* Testing */
    /* ------- */

    testCompile 'junit:junit:4.12'

    // Mocking framework for unit tests
    testCompile "org.mockito:mockito-core:2.0.31-beta"

    // Fluent test propositions for unit tests
    testCompile 'com.google.truth:truth:0.27'

    androidTestCompile ('com.android.support.test:runner:0.4.1') {
        exclude module: 'support-annotations'
    }

    // Use Junit4 Rules
    androidTestCompile ('com.android.support.test:rules:0.4') {
        exclude module: 'support-annotations'
    }

    // Espresso UI Testing framework
    androidTestCompile ('com.android.support.test.espresso:espresso-core:2.2.1') {
        exclude module: 'support-annotations'
        exclude group: 'javax.inject' // required to play nice with dagger
    }

    // Fluid test propositions for instrumentation tests
    androidTestCompile ('com.squareup.assertj:assertj-android:1.1.1') {
        exclude module: 'support-annotations'
    }
}

/* signing application */
def props = new Properties()
props.load(new FileInputStream(rootProject.file("signing.properties")))
android.signingConfigs.release.storeFile rootProject.file(props.keyStore)
android.signingConfigs.release.storePassword props.keyStorePassword
android.signingConfigs.release.keyAlias props.keyAlias
android.signingConfigs.release.keyPassword props.keyAliasPassword
